---
swagger: "2.0"
info:
  version: "version not set"
  title: "proto/allocation/allocation.proto"
tags:
- name: "AllocationService"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /gameserverallocation:
    post:
      tags:
      - "AllocationService"
      operationId: "Allocate"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/allocationAllocationRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "A successful response."
          schema:
            $ref: "#/definitions/allocationAllocationResponse"
definitions:
  AllocationRequestSchedulingStrategy:
    type: "string"
    enum:
    - "Packed"
    - "Distributed"
    default: "Packed"
  AllocationResponseGameServerStatusPort:
    type: "object"
    properties:
      name:
        type: "string"
      port:
        type: "integer"
        format: "int32"
    description: "The gameserver port info that is allocated."
    example:
      port: 0
      name: "name"
  GameServerSelectorGameServerState:
    type: "string"
    enum:
    - "READY"
    - "ALLOCATED"
    default: "READY"
  allocationAllocationRequest:
    type: "object"
    properties:
      namespace:
        type: "string"
        title: "The k8s namespace that is hosting the targeted fleet of gameservers\
          \ to be allocated"
      multiClusterSetting:
        description: "If specified, multi-cluster policies are applied. Otherwise,\
          \ allocation will happen locally."
        $ref: "#/definitions/allocationMultiClusterSetting"
      requiredGameServerSelector:
        description: "Deprecated: Please use gameServerSelectors instead. This field\
          \ is ignored if the\ngameServerSelectors field is set\nThe required allocation.\
          \ Defaults to all GameServers."
        $ref: "#/definitions/allocationGameServerSelector"
      preferredGameServerSelectors:
        type: "array"
        description: "Deprecated: Please use gameServerSelectors instead. This field\
          \ is ignored if the\ngameServerSelectors field is set\nThe ordered list\
          \ of preferred allocations out of the `required` set.\nIf the first selector\
          \ is not matched, the selection attempts the second selector, and so on."
        items:
          $ref: "#/definitions/allocationGameServerSelector"
      scheduling:
        description: "Scheduling strategy. Defaults to \"Packed\"."
        $ref: "#/definitions/AllocationRequestSchedulingStrategy"
      metaPatch:
        title: "Deprecated: Please use metadata instead. This field is ignored if\
          \ the\nmetadata field is set"
        $ref: "#/definitions/allocationMetaPatch"
      metadata:
        title: "Metadata is optional custom metadata that is added to the game server\
          \ at\nallocation. You can use this to tell the server necessary session\
          \ data"
        $ref: "#/definitions/allocationMetaPatch"
      gameServerSelectors:
        type: "array"
        description: "Ordered list of GameServer label selectors.\nIf the first selector\
          \ is not matched, the selection attempts the second selector, and so on.\n\
          This is useful for things like smoke testing of new game servers.\nNote:\
          \ This field can only be set if neither Required or Preferred is set."
        items:
          $ref: "#/definitions/allocationGameServerSelector"
  allocationAllocationResponse:
    type: "object"
    properties:
      gameServerName:
        type: "string"
      ports:
        type: "array"
        items:
          $ref: "#/definitions/AllocationResponseGameServerStatusPort"
      address:
        type: "string"
      nodeName:
        type: "string"
      source:
        type: "string"
    example:
      nodeName: "nodeName"
      address: "address"
      gameServerName: "gameServerName"
      source: "source"
      ports:
      - port: 0
        name: "name"
      - port: 0
        name: "name"
  allocationGameServerSelector:
    type: "object"
    properties:
      matchLabels:
        type: "object"
        description: "Labels to match."
        additionalProperties:
          type: "string"
      gameServerState:
        $ref: "#/definitions/GameServerSelectorGameServerState"
      players:
        $ref: "#/definitions/allocationPlayerSelector"
    description: "GameServerSelector used for finding a GameServer with matching filters."
  allocationLabelSelector:
    type: "object"
    properties:
      matchLabels:
        type: "object"
        description: "Labels to match."
        additionalProperties:
          type: "string"
    description: "LabelSelector used for finding a GameServer with matching labels."
  allocationMetaPatch:
    type: "object"
    properties:
      labels:
        type: "object"
        additionalProperties:
          type: "string"
      annotations:
        type: "object"
        additionalProperties:
          type: "string"
    title: "MetaPatch is the metadata used to patch the GameServer metadata on allocation"
  allocationMultiClusterSetting:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        format: "boolean"
        description: "If set to true, multi-cluster allocation is enabled."
      policySelector:
        description: "Selects multi-cluster allocation policies to apply. If not specified,\
          \ all multi-cluster allocation policies are to be applied."
        $ref: "#/definitions/allocationLabelSelector"
    description: "Specifies settings for multi-cluster allocation."
  allocationPlayerSelector:
    type: "object"
    properties:
      minAvailable:
        type: "string"
        format: "uint64"
      maxAvailable:
        type: "string"
        format: "uint64"
    description: "PlayerSelector is filter for player capacity values.\nminAvailable\
      \ should always be less or equal to maxAvailable."
